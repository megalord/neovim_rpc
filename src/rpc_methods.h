#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include "cmp.h"
#include "rpc.h"

// This file is automatically generated.  It was built against Neovim Version 0.2.0

typedef uint8_t Buffer;
#define NVIM_EXT_Buffer 0
typedef uint8_t Window;
#define NVIM_EXT_Window 1
typedef uint8_t Tabpage;
#define NVIM_EXT_Tabpage 2

bool nvim_buf_line_count (Buffer buffer, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_line_count", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_buf_get_lines (Buffer buffer, int64_t start, int64_t end, bool strict_indexing, char **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_lines", 4)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, start)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, end)) {
    return false;
  }
  if (!cmp_write_bool(&cmp, strict_indexing)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(char));
  for (int i = 0; i < *size; i++) {
  if (!read_string(*result + i * sizeof(char))) {
    return false;
  }
  }
  return true;
}

bool nvim_buf_set_lines (Buffer buffer, int64_t start, int64_t end, bool strict_indexing, char **replacement, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_set_lines", 5)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, start)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, end)) {
    return false;
  }
  if (!cmp_write_bool(&cmp, strict_indexing)) {
    return false;
  }
  if (!cmp_write_array(&cmp, sizeof(replacement))) {
    return false;
  }
  return true;
}

bool nvim_buf_get_var (Buffer buffer, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_buf_set_var (Buffer buffer, char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_set_var", 3)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_buf_del_var (Buffer buffer, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_del_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_buf_get_option (Buffer buffer, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_option", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_buf_set_option (Buffer buffer, char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_set_option", 3)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_buf_get_number (Buffer buffer, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_number", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_buf_get_name (Buffer buffer, char *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_name", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!read_string(result)) {
    return false;
  }
  return true;
}

bool nvim_buf_set_name (Buffer buffer, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_set_name", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_buf_is_valid (Buffer buffer, bool *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_is_valid", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_buf_get_mark (Buffer buffer, char *name, int64_t **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_get_mark", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(int64_t));
  for (int i = 0; i < *size; i++) {
  if (!cmp_read_integer(&cmp, *result + i * sizeof(int64_t))) {
    return false;
  }
  }
  return true;
}

bool nvim_buf_add_highlight (Buffer buffer, int64_t src_id, char *hl_group, int64_t line, int64_t col_start, int64_t col_end, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_add_highlight", 6)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, src_id)) {
    return false;
  }
  if (!cmp_write_str(&cmp, hl_group, strlen(hl_group))) {
    return false;
  }
  if (!cmp_write_integer(&cmp, line)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, col_start)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, col_end)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_buf_clear_highlight (Buffer buffer, int64_t src_id, int64_t line_start, int64_t line_end) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_buf_clear_highlight", 4)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, src_id)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, line_start)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, line_end)) {
    return false;
  }
  return true;
}

bool nvim_tabpage_list_wins (Tabpage tabpage, Window **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_list_wins", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(Window));
  for (int i = 0; i < *size; i++) {
  }
  return true;
}

bool nvim_tabpage_get_var (Tabpage tabpage, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_get_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_tabpage_set_var (Tabpage tabpage, char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_set_var", 3)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_tabpage_del_var (Tabpage tabpage, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_del_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_tabpage_get_win (Tabpage tabpage, Window *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_get_win", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_tabpage_get_number (Tabpage tabpage, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_get_number", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_tabpage_is_valid (Tabpage tabpage, bool *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_tabpage_is_valid", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_ui_attach (int64_t width, int64_t height, void *options) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_ui_attach", 3)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, width)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, height)) {
    return false;
  }
  if (!cmp_write_str(&cmp, options, sizeof(options))) {
    return false;
  }
  return true;
}

bool nvim_ui_detach () {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_ui_detach", 0)) {
    return false;
  }
  return true;
}

bool nvim_ui_try_resize (int64_t width, int64_t height) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_ui_try_resize", 2)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, width)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, height)) {
    return false;
  }
  return true;
}

bool nvim_ui_set_option (char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_ui_set_option", 2)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_command (char *command) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_command", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, command, strlen(command))) {
    return false;
  }
  return true;
}

bool nvim_feedkeys (char *keys, char *mode, bool escape_csi) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_feedkeys", 3)) {
    return false;
  }
  if (!cmp_write_str(&cmp, keys, strlen(keys))) {
    return false;
  }
  if (!cmp_write_str(&cmp, mode, strlen(mode))) {
    return false;
  }
  if (!cmp_write_bool(&cmp, escape_csi)) {
    return false;
  }
  return true;
}

bool nvim_input (char *keys, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_input", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, keys, strlen(keys))) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_replace_termcodes (char *str, bool from_part, bool do_lt, bool special, char *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_replace_termcodes", 4)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  if (!cmp_write_bool(&cmp, from_part)) {
    return false;
  }
  if (!cmp_write_bool(&cmp, do_lt)) {
    return false;
  }
  if (!cmp_write_bool(&cmp, special)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!read_string(result)) {
    return false;
  }
  return true;
}

bool nvim_command_output (char *str, char *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_command_output", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!read_string(result)) {
    return false;
  }
  return true;
}

bool nvim_eval (char *expr) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_eval", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, expr, strlen(expr))) {
    return false;
  }
  return true;
}

bool nvim_call_function (char *fname, void **args, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_call_function", 2)) {
    return false;
  }
  if (!cmp_write_str(&cmp, fname, strlen(fname))) {
    return false;
  }
  if (!cmp_write_array(&cmp, *size)) {
    return false;
  }
  return true;
}

bool nvim_strwidth (char *str, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_strwidth", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_list_runtime_paths (char **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_list_runtime_paths", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(char));
  for (int i = 0; i < *size; i++) {
  if (!read_string(*result + i * sizeof(char))) {
    return false;
  }
  }
  return true;
}

bool nvim_set_current_dir (char *dir) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_current_dir", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, dir, strlen(dir))) {
    return false;
  }
  return true;
}

bool nvim_get_current_line (char *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_current_line", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!read_string(result)) {
    return false;
  }
  return true;
}

bool nvim_set_current_line (char *line) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_current_line", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, line, strlen(line))) {
    return false;
  }
  return true;
}

bool nvim_del_current_line () {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_del_current_line", 0)) {
    return false;
  }
  return true;
}

bool nvim_get_var (char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_var", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_set_var (char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_var", 2)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_del_var (char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_del_var", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_get_vvar (char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_vvar", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_get_option (char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_option", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_set_option (char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_option", 2)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_out_write (char *str) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_out_write", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  return true;
}

bool nvim_err_write (char *str) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_err_write", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  return true;
}

bool nvim_err_writeln (char *str) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_err_writeln", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, str, strlen(str))) {
    return false;
  }
  return true;
}

bool nvim_list_bufs (Buffer **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_list_bufs", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(Buffer));
  for (int i = 0; i < *size; i++) {
  int8_t ext_type;
  uint32_t ext_size;
  if (!cmp_read_ext(&cmp, &ext_type, &ext_size, *result + i * sizeof(Buffer))) {
    return false;
  }
  }
  return true;
}

bool nvim_get_current_buf (Buffer *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_current_buf", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  int8_t ext_type;
  uint32_t ext_size;
  if (!cmp_read_ext(&cmp, &ext_type, &ext_size, result)) {
    return false;
  }
  return true;
}

bool nvim_set_current_buf (Buffer buffer) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_current_buf", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Buffer, sizeof(buffer), &buffer)) {
    return false;
  }
  return true;
}

bool nvim_list_wins (Window **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_list_wins", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(Window));
  for (int i = 0; i < *size; i++) {
  }
  return true;
}

bool nvim_get_current_win (Window *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_current_win", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_set_current_win (Window window) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_current_win", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  return true;
}

bool nvim_list_tabpages (Tabpage **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_list_tabpages", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(Tabpage));
  for (int i = 0; i < *size; i++) {
  }
  return true;
}

bool nvim_get_current_tabpage (Tabpage *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_current_tabpage", 0)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_set_current_tabpage (Tabpage tabpage) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_set_current_tabpage", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Tabpage, sizeof(tabpage), &tabpage)) {
    return false;
  }
  return true;
}

bool nvim_subscribe (char *event) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_subscribe", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, event, strlen(event))) {
    return false;
  }
  return true;
}

bool nvim_unsubscribe (char *event) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_unsubscribe", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, event, strlen(event))) {
    return false;
  }
  return true;
}

bool nvim_get_color_by_name (char *name, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_color_by_name", 1)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_get_color_map () {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_color_map", 0)) {
    return false;
  }
  return true;
}

bool nvim_get_api_info () {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_get_api_info", 0)) {
    return false;
  }
  return true;
}

bool nvim_call_atomic (void **calls, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_call_atomic", 1)) {
    return false;
  }
  if (!cmp_write_array(&cmp, *size)) {
    return false;
  }
  return true;
}

bool nvim_win_get_buf (Window window, Buffer *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_buf", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  int8_t ext_type;
  uint32_t ext_size;
  if (!cmp_read_ext(&cmp, &ext_type, &ext_size, result)) {
    return false;
  }
  return true;
}

bool nvim_win_get_cursor (Window window, int64_t **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_cursor", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(int64_t));
  for (int i = 0; i < *size; i++) {
  if (!cmp_read_integer(&cmp, *result + i * sizeof(int64_t))) {
    return false;
  }
  }
  return true;
}

bool nvim_win_set_cursor (Window window, int64_t **pos, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_set_cursor", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_array(&cmp, 2)) {
    return false;
  }
  return true;
}

bool nvim_win_get_height (Window window, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_height", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_win_set_height (Window window, int64_t height) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_set_height", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, height)) {
    return false;
  }
  return true;
}

bool nvim_win_get_width (Window window, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_width", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_win_set_width (Window window, int64_t width) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_set_width", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_integer(&cmp, width)) {
    return false;
  }
  return true;
}

bool nvim_win_get_var (Window window, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_win_set_var (Window window, char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_set_var", 3)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_win_del_var (Window window, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_del_var", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_win_get_option (Window window, char *name) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_option", 2)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  return true;
}

bool nvim_win_set_option (Window window, char *name, void *value) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_set_option", 3)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!cmp_write_str(&cmp, name, strlen(name))) {
    return false;
  }
  if (!cmp_write_str(&cmp, value, sizeof(value))) {
    return false;
  }
  return true;
}

bool nvim_win_get_position (Window window, int64_t **result, uint32_t *size) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_position", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_array(&cmp, size)) {
    return false;
  }
  *result = malloc(*size * sizeof(int64_t));
  for (int i = 0; i < *size; i++) {
  if (!cmp_read_integer(&cmp, *result + i * sizeof(int64_t))) {
    return false;
  }
  }
  return true;
}

bool nvim_win_get_tabpage (Window window, Tabpage *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_tabpage", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

bool nvim_win_get_number (Window window, int64_t *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_get_number", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  if (!cmp_read_integer(&cmp, result)) {
    return false;
  }
  return true;
}

bool nvim_win_is_valid (Window window, bool *result) {
  if (!rpc_send(NVIM_RPC_REQUEST, "nvim_win_is_valid", 1)) {
    return false;
  }
  if (!cmp_write_ext(&cmp, NVIM_EXT_Window, sizeof(window), &window)) {
    return false;
  }
  if (!read_message_headers()) {
    return false;
  }
  return true;
}

